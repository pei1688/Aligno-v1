// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id           String     @id @unique
  email        String
  firstName    String
  lastName     String
  profileImage String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  workspaces   Workspace[] // 用戶可以擁有多個 Workspace
}

model Workspace {
  id           String   @id @default(uuid())
  title        String
  description  String?
  createdAt    DateTime @default(now())
  userId       String   // 綁定用戶 ID
  user         User     @relation(fields: [userId], references: [id]) // 關聯到 User 模型
  boards       Board[]
}

model Board {
  id            String   @id @default(uuid()) @map("_id")
  title         String   
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  imageId       String   @db.Text         // 使用 TEXT 型別，可儲存大量文本
  imageThumbUrl String   @db.Text 
  imageFullUrl  String   @db.Text 
  imageUserName String   @db.Text 
  imageLinkHTML String   @db.Text 

  isFavorites   Boolean  @default(false)

  lists          List[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
 
}

model List{
  id            String @id @default(uuid())
  title         String
  order         Int //順序

  boardId       String
  board         Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  cards         Card[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([boardId])
 
}

model Card {
  id            String @id @default(uuid())
  title         String
  order         Int
  description   String? @db.Text

  completed     Boolean  @default(false)

  listId        String
  list          List@relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([listId])
 
}

enum ACTION {
  CREATE
  UPDATE
  MOVE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

model ActivityLog {
  id             String @id @default(uuid())
  workspaceId    String
  boardId        String      
  action         ACTION
  entityId       String
  entityType     ENTITY_TYPE
  entityTitle    String
  userId         String
  userImage      String
  userName       String

  fromListId     String?
  toListId       String?
  fromListName   String?
  toListName     String?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt 

  @@map("actvity_logs")
}


model WorkspaceLimit {
  id             String @id @default(uuid())
  workspaceId    String @unique
  count          Int @default(0)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt 
}


//訂閱
model WorkspaceSub{
  id             String @id @default(uuid())
  workspaceId    String @unique


  stripeCustomerId String? @unique @map(name:"stripe_customer_id") //Stripe的客戶 ID，標識該工作區的付款客戶
  stripeSubscriptionId String? @unique @map(name:"stripe_subscription_id") //Stripe訂閱 ID，表示這個工作區的 當前訂閱
  stripePriceId   String? @map(name:"stripe_price_id") //計費方案 ID
  stripeCurrentPeriodEnd DateTime? @map(name:"stripe_current_period_end") //訂閱結束時間
}